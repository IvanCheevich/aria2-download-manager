#!/usr/bin/env python3

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(__file__))

from aria2_client import Aria2Client


class DebugDownloadGUI:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è GUI —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Aria2 Download Manager (Debug)")
        self.root.geometry("900x700")
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ–±–ª–∞—Å—Ç—å
        self.setup_debug_ui()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aria2 –∫–ª–∏–µ–Ω—Ç–∞
        self.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aria2 –∫–ª–∏–µ–Ω—Ç–∞...")
        self.aria2_client = Aria2Client()
        
        self.log("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ aria2 –¥–µ–º–æ–Ω–∞...")
        if not self.aria2_client.start_aria2_daemon():
            self.log("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å aria2")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å aria2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
        else:
            self.log("‚úÖ aria2 –¥–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            self.setup_main_ui()
        
    def setup_debug_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –õ–æ–≥ –æ–±–ª–∞—Å—Ç—å
        log_frame = ttk.LabelFrame(main_frame, text="–õ–æ–≥ –æ—Ç–ª–∞–¥–∫–∏")
        log_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∞
        self.log_text = tk.Text(log_frame, height=15, wrap=tk.WORD)
        log_scrollbar = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=log_scrollbar.set)
        
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_frame = ttk.Frame(main_frame)
        test_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(test_frame, text="–¢–µ—Å—Ç aria2", command=self.test_aria2).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(test_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_log).pack(side=tk.LEFT, padx=(0, 5))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_refresh_var = tk.BooleanVar(value=True)
        auto_check = ttk.Checkbutton(test_frame, text="üîÑ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                                   variable=self.auto_refresh_var,
                                   command=self.toggle_auto_refresh)
        auto_check.pack(side=tk.LEFT, padx=(10, 5))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(main_frame, text="–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.status_label.pack(fill=tk.X)
        
    def setup_main_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ aria2"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.root)
        control_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        ttk.Button(control_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å URL", 
                  command=self.add_url_dialog).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(control_frame, text="üß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∞", 
                  command=self.add_download).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(control_frame, text="üß≤ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç", 
                  command=self.add_torrent_dialog).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(control_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                  command=self.refresh_downloads).pack(side=tk.LEFT, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
        ttk.Button(control_frame, text="‚è∏Ô∏è –ü–∞—É–∑–∞/–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.toggle_last_download).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(control_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", 
                  command=self.remove_last_download).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(control_frame, text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", 
                  command=self.open_downloads_folder).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(control_frame, text="üî• –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", 
                  command=self.delete_last_file).pack(side=tk.LEFT)
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∑–æ–∫ (–ø—Ä–æ—Å—Ç–æ–π)
        downloads_frame = ttk.LabelFrame(self.root, text="–ó–∞–≥—Ä—É–∑–∫–∏")
        downloads_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        self.downloads_text = tk.Text(downloads_frame, height=8, font=("Consolas", 10))
        downloads_scroll = ttk.Scrollbar(downloads_frame, orient=tk.VERTICAL, command=self.downloads_text.yview)
        self.downloads_text.configure(yscrollcommand=downloads_scroll.set)
        
        self.downloads_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(5, 0), pady=5)
        downloads_scroll.pack(side=tk.RIGHT, fill=tk.Y, padx=(0, 5), pady=5)
        
        self.status_label.config(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.start_auto_refresh()
        
    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        import datetime
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        
        if hasattr(self, 'log_text'):
            self.log_text.insert(tk.END, log_message)
            self.log_text.see(tk.END)
        
        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print(log_message.strip())
        
    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log_text.delete(1.0, tk.END)
        
    def test_aria2(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç aria2"""
        self.log("=== –¢–ï–°–¢ ARIA2 ===")
        
        import subprocess
        paths = ["/usr/bin/aria2c", "aria2c"]
        
        for path in paths:
            self.log(f"–¢–µ—Å—Ç–∏—Ä—É—é: {path}")
            try:
                result = subprocess.run([path, "--version"], 
                                      capture_output=True, text=True, timeout=3)
                if result.returncode == 0:
                    version = result.stdout.split()[2] if len(result.stdout.split()) > 2 else "unknown"
                    self.log(f"‚úÖ {path} —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–µ—Ä—Å–∏—è: {version}")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            except Exception as e:
                self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥–µ–º–æ–Ω—É
        try:
            import requests
            response = requests.post(
                "http://localhost:6800/jsonrpc",
                json={"jsonrpc": "2.0", "id": "test", "method": "aria2.getVersion"},
                timeout=3
            )
            if response.status_code == 200:
                self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–µ–º–æ–Ω—É —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
    def add_url_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        from tkinter import simpledialog, filedialog
        
        self.log("=== –î–û–ë–ê–í–õ–ï–ù–ò–ï URL ===")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL
        url = simpledialog.askstring(
            "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É",
            "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
            parent=self.root
        )
        
        if not url:
            self.log("‚ùå URL –Ω–µ –≤–≤–µ–¥–µ–Ω")
            return
            
        self.log(f"–í–≤–µ–¥–µ–Ω URL: {url}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞–ø–∫—É
        folder = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
            initialdir=os.path.expanduser("~/Downloads")
        )
        
        if not folder:
            folder = os.path.expanduser("~/Downloads")
            self.log(f"–ò—Å–ø–æ–ª—å–∑—É—é –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {folder}")
        else:
            self.log(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
        
        try:
            options = {"dir": folder}
            self.log(f"–û–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {options}")
            
            gid = self.aria2_client.add_download(url, options)
            if gid:
                self.log(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {gid}")
                self.refresh_downloads()
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            import traceback
            self.log(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

    def add_download(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É"""
        url = "http://httpbin.org/bytes/1024"  # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        self.log(f"–î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É: {url}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–ø—Ü–∏—è–º–∏
            options = {"dir": os.path.expanduser("~/Downloads")}
            self.log(f"–û–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {options}")
            
            gid = self.aria2_client.add_download(url, options)
            if gid:
                self.log(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {gid}")
                self.refresh_downloads()
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            import traceback
            self.log(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    def add_torrent_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞"""
        from tkinter import filedialog, messagebox
        
        self.log("=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–†–†–ï–ù–¢–ê ===")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª
        torrent_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª",
            initialdir=os.path.expanduser("~/–ó–∞–≥—Ä—É–∑–∫–∏"),
            filetypes=[("–¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª—ã", "*.torrent"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if not torrent_path:
            self.log("‚ùå –¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        
        self.log(f"–í—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ä–µ–Ω—Ç: {torrent_path}")
        
        if not os.path.exists(torrent_path):
            self.log("‚ùå –¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        folder = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
            initialdir=os.path.expanduser("~/–ó–∞–≥—Ä—É–∑–∫–∏")
        )
        
        if not folder:
            folder = os.path.expanduser("~/–ó–∞–≥—Ä—É–∑–∫–∏")
            self.log(f"–ò—Å–ø–æ–ª—å–∑—É—é –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {folder}")
        else:
            self.log(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
            options = {"dir": folder}
            self.log(f"–û–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {options}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(torrent_path)
            self.log(f"–†–∞–∑–º–µ—Ä —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            with open(torrent_path, 'rb') as f:
                first_bytes = f.read(10)
                self.log(f"–ü–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞: {first_bytes}")
            
            self.log("–í—ã–∑—ã–≤–∞—é aria2_client.add_torrent...")
            gid = self.aria2_client.add_torrent(torrent_path, options)
            self.log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç add_torrent: {gid}")
            
            if gid:
                self.log(f"‚úÖ –¢–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {gid}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {gid}")
                self.refresh_downloads()
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç - aria2 –≤–µ—Ä–Ω—É–ª None")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: {e}")
            import traceback
            self.log(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:\n{e}")
    
    def test_torrent(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        from tkinter import filedialog
        
        self.log("=== –¢–ï–°–¢ –¢–û–†–†–ï–ù–¢–ê ===")
        
        # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª
        torrent_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞",
            filetypes=[("–¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª—ã", "*.torrent"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if not torrent_path:
            self.log("‚ùå –¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        
        self.log(f"–í—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ä–µ–Ω—Ç: {torrent_path}")
        
        try:
            gid = self.aria2_client.add_torrent(torrent_path)
            if gid:
                self.log(f"‚úÖ –¢–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {gid}")
                self.refresh_downloads()
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: {e}")
            
    def refresh_downloads(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∑–æ–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        try:
            downloads = self.aria2_client.get_all_downloads()
            self.downloads_text.delete(1.0, tk.END)
            
            if downloads:
                self.downloads_text.insert(tk.END, "=" * 80 + "\n")
                self.downloads_text.insert(tk.END, "üìã –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ì–†–£–ó–ö–ò\n")
                self.downloads_text.insert(tk.END, "=" * 80 + "\n\n")
                
                active_count = 0
                for download in downloads:
                    gid = download.get("gid", "")[:8]
                    status = download.get("status", "unknown")
                    files = download.get("files", [])
                    filename = "unknown"
                    if files:
                        filename = os.path.basename(files[0].get("path", "unknown"))
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    total_length = int(download.get("totalLength", 0))
                    completed_length = int(download.get("completedLength", 0))
                    download_speed = int(download.get("downloadSpeed", 0))
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
                    def format_size(bytes_num):
                        for unit in ['B', 'KB', 'MB', 'GB']:
                            if bytes_num < 1024.0:
                                return f"{bytes_num:.1f} {unit}"
                            bytes_num /= 1024.0
                        return f"{bytes_num:.1f} TB"
                    
                    def format_speed(bytes_per_sec):
                        return format_size(bytes_per_sec) + "/s"
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if total_length > 0:
                        progress = (completed_length / total_length) * 100
                        progress_bar = "‚ñà" * int(progress / 5) + "‚ñë" * (20 - int(progress / 5))
                        size_info = f"{format_size(completed_length)} / {format_size(total_length)}"
                    else:
                        progress = 0
                        progress_bar = "‚ñë" * 20
                        size_info = format_size(completed_length)
                    
                    # –°–∫–æ—Ä–æ—Å—Ç—å –∏ ETA
                    if download_speed > 0:
                        speed_info = format_speed(download_speed)
                        if total_length > completed_length:
                            eta_seconds = (total_length - completed_length) / download_speed
                            eta_info = f"ETA: {int(eta_seconds//60)}:{int(eta_seconds%60):02d}"
                        else:
                            eta_info = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                    else:
                        speed_info = "0 B/s"
                        eta_info = "‚àû"
                    
                    # –°—Ç–∞—Ç—É—Å
                    status_emoji = {
                        "active": "üîÑ",
                        "paused": "‚è∏Ô∏è", 
                        "complete": "‚úÖ",
                        "error": "‚ùå",
                        "removed": "üóëÔ∏è"
                    }.get(status, "‚ùì")
                    
                    if status == "active":
                        active_count += 1
                    
                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
                    self.downloads_text.insert(tk.END, f"üìÅ {filename}\n")
                    self.downloads_text.insert(tk.END, f"üÜî {gid} | {status_emoji} {status.upper()}\n")
                    self.downloads_text.insert(tk.END, f"üìä [{progress_bar}] {progress:.1f}%\n")
                    self.downloads_text.insert(tk.END, f"üíæ {size_info}\n")
                    self.downloads_text.insert(tk.END, f"‚ö° {speed_info} | ‚è±Ô∏è {eta_info}\n")
                    self.downloads_text.insert(tk.END, "-" * 60 + "\n\n")
                
                # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                self.downloads_text.insert(tk.END, f"üìà –ò–¢–û–ì–û: {len(downloads)} –∑–∞–≥—Ä—É–∑–æ–∫, –∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n")
            else:
                self.downloads_text.insert(tk.END, "üì≠ –ù–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫\n")
                
            self.log(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫: {len(downloads)} –∑–∞–≥—Ä—É–∑–æ–∫")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
    
    def toggle_last_download(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞—É–∑—É/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            downloads = self.aria2_client.get_all_downloads()
            if not downloads:
                self.log("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                return
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            last_download = None
            for download in downloads:
                if download.get("status") in ["active", "paused"]:
                    last_download = download
                    break
            
            if not last_download:
                self.log("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫")
                return
            
            gid = last_download.get("gid")
            status = last_download.get("status")
            filename = "unknown"
            files = last_download.get("files", [])
            if files:
                filename = os.path.basename(files[0].get("path", "unknown"))
            
            if status == "active":
                self.aria2_client.pause_download(gid)
                self.log(f"‚è∏Ô∏è –ü–∞—É–∑–∞: {filename} ({gid[:8]})")
            elif status == "paused":
                self.aria2_client.unpause_download(gid)
                self.log(f"‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {filename} ({gid[:8]})")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π: {e}")
    
    def remove_last_download(self):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∑–∫—É"""
        try:
            downloads = self.aria2_client.get_all_downloads()
            if not downloads:
                self.log("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∑–∫—É
            last_download = downloads[0]
            gid = last_download.get("gid")
            filename = "unknown"
            files = last_download.get("files", [])
            if files:
                filename = os.path.basename(files[0].get("path", "unknown"))
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            from tkinter import messagebox
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                 f"–£–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É?\n{filename}\n\n–≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –∑–∞–≥—Ä—É–∑–∫—É, –Ω–æ —Ñ–∞–π–ª –æ—Å—Ç–∞–Ω–µ—Ç—Å—è."):
                self.aria2_client.remove_download(gid)
                self.log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞: {filename} ({gid[:8]})")
            else:
                self.log("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    def open_downloads_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫"""
        try:
            downloads_folder = os.path.expanduser("~/–ó–∞–≥—Ä—É–∑–∫–∏")
            os.system(f'xdg-open "{downloads_folder}"')
            self.log(f"üìÅ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: {downloads_folder}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏: {e}")
    
    def delete_last_file(self):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            downloads = self.aria2_client.get_all_downloads()
            if not downloads:
                self.log("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫")
                return
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            last_download = None
            for download in downloads:
                if download.get("status") == "complete":
                    last_download = download
                    break
            
            if not last_download:
                self.log("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
                return
            
            files = last_download.get("files", [])
            if not files:
                self.log("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            file_path = files[0].get("path", "")
            if not file_path or not os.path.exists(file_path):
                self.log("‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            filename = os.path.basename(file_path)
            gid = last_download.get("gid", "")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            from tkinter import messagebox
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                 f"–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞?\n{filename}\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞!"):
                
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ aria2
                self.aria2_client.remove_download(gid)
                
                # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                os.remove(file_path)
                self.log(f"üî• –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filename}")
                self.log(f"üìÅ –ü—É—Ç—å: {file_path}")
            else:
                self.log("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            import traceback
            self.log(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
    
    def start_auto_refresh(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.auto_refresh_active = True
        self.schedule_refresh()
    
    def schedule_refresh(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if hasattr(self, 'auto_refresh_active') and self.auto_refresh_active:
            self.refresh_downloads()
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            self.root.after(2000, self.schedule_refresh)
    
    def stop_auto_refresh(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.auto_refresh_active = False
    
    def toggle_auto_refresh(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if self.auto_refresh_var.get():
            self.log("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
            self.start_auto_refresh()
        else:
            self.log("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
            self.stop_auto_refresh()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.log("–ó–∞–ø—É—Å–∫ GUI...")
        try:
            self.root.mainloop()
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ GUI: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = DebugDownloadGUI()
    app.run()


if __name__ == "__main__":
    main()